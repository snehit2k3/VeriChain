import React, { useState, useEffect } from 'react';
import { useWeb3 } from './context/Web3Context';
import ProducerDashboard from './components/ProducerDashboard';
import RefineryDashboard from './components/RefineryDashboard';
import DistributorDashboard from './components/DistributorDashboard';
import AuditorView from './components/AuditorView';
import './App.css';

function App() {
Â  const { contract, account: userAddress, isConnected, connect, disconnect } = useWeb3();
Â  const [userRole, setUserRole] = useState(null);
Â  const [isLoading, setIsLoading] = useState(true);

Â  const VITE_DISTRIBUTOR_ADDRESS = import.meta.env.VITE_DISTRIBUTOR_ADDRESS || '';

Â  const formatAddress = (address) => {
Â  Â  if (!address) return '';
Â  Â  return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
Â  };
Â  
Â  const handleLogout = async () => {
Â  Â  if (disconnect) {
Â  Â  Â  await disconnect();
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  if (!isConnected || !userAddress) {
Â  Â  Â  setUserRole(null);
Â  Â  Â  setIsLoading(false);
Â  Â  Â  return;
Â  Â  }

Â  Â  const checkUserRole = async () => {
Â  Â  Â  if (contract && userAddress) {
Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  if (userAddress.toLowerCase() === VITE_DISTRIBUTOR_ADDRESS.toLowerCase()) {
Â  Â  Â  Â  Â  Â  setUserRole('Distributor');
Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  const PRODUCER_ROLE = await contract.PRODUCER_ROLE();
Â  Â  Â  Â  Â  const REFINERY_ROLE = await contract.REFINERY_ROLE();

Â  Â  Â  Â  Â  const isProducer = await contract.hasRole(PRODUCER_ROLE, userAddress);
Â  Â  Â  Â  Â  if (isProducer) { setUserRole('Producer'); return; }

Â  Â  Â  Â  Â  const isRefinery = await contract.hasRole(REFINERY_ROLE, userAddress);
Â  Â  Â  Â  Â  if (isRefinery) { setUserRole('Refinery'); return; }
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  setUserRole('Auditor');
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  console.error("Error during role check:", error);
Â  Â  Â  Â  Â  setUserRole('Auditor');
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  };
Â  Â  checkUserRole();
Â  }, [contract, userAddress, isConnected, VITE_DISTRIBUTOR_ADDRESS]);

Â  const renderDashboard = () => {
Â  Â  switch (userRole) {
Â  Â  Â  case 'Producer': return <ProducerDashboard />;
Â  Â  Â  case 'Refinery': return <RefineryDashboard />;
Â  Â  Â  case 'Distributor': return <DistributorDashboard />;
Â  Â  Â  case 'Auditor': return <AuditorView />;
Â  Â  Â  default: return null; 
Â  Â  }
Â  };

Â  return (
Â  Â  <div className="App">
Â  Â  Â  <header className="App-header">
Â  Â  Â  Â  <div className="logo-container">
Â  Â  Â  Â  Â  <h1>ðŸŒ¿ VeriChain Traceability</h1>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  <div className="connection-container">
Â  Â  Â  Â  Â  {isConnected ? (
Â  Â  Â  Â  Â  Â  <div className="wallet-info">
Â  Â  Â  Â  Â  Â  Â  <span className="wallet-address">{formatAddress(userAddress)}</span>
Â  Â  Â  Â  Â  Â  Â  <button onClick={handleLogout} className="logout-button">Logout</button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <button onClick={connect} className="connect-button">Connect Wallet</button>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </header>
Â  Â  Â  
Â  Â  Â  <main className="main-content">
Â  Â  Â  Â  {!isConnected ? (
          <>
            <div className="connect-prompt">
              <div className="prompt-box">
                <h2>Welcome to VeriChain</h2>
                <p>The decentralized solution for supply chain transparency.</p>
                <p>Please connect your wallet to continue.</p>
              </div>
            </div>

            {/* === ADD THIS NEW SECTION === */}
            <div className="info-cards-container">
              <div className="info-card">
                <h3>For Producers</h3>
                <p>Register new batches of raw materials onto the blockchain, ensuring the origin and integrity of your products from the very start.</p>
              </div>
              <div className="info-card">
                <h3>For Refineries</h3>
                <p>Receive batches from producers, process them, and update their status on the chain. Create a verifiable link in the product's journey.</p>
              </div>
              <div className="info-card">
                <h3>For Distributors</h3>
                <p>Manage the final leg of the supply chain. Receive goods from refineries and log final distribution, completing the transparent record.</p>
              </div>
            </div>
            {/* === END OF NEW SECTION === */}
          </>
Â  Â  Â  Â  ) : isLoading ? (
Â  Â  Â  Â  Â  <div className="loading-overlay">
Â  Â  Â  Â  Â  Â  <div className="spinner"></div>
Â  Â  Â  Â  Â  Â  <p>Verifying your role on the blockchain...</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  renderDashboard()
Â  Â  Â  Â  )}
Â  Â  Â  </main>
Â  Â  </div>
Â  );
}

export default App;